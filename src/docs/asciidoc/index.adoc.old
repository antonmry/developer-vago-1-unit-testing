= : Building and testing Java 9 applications with Gradle
Cédric Champeau (@CedricChampeau), Gradle
2017-10-04
:revnumber: {project-version}
:example-caption!:
ifndef::imagesdir[:imagesdir: images]
ifndef::sourcedir[:sourcedir: ../java]
:navigation:
:menu:
:status:
:title-slide-background-image: title.jpeg
:title-slide-transition: zoom
:title-slide-transition-speed: fast
:icons: font

== Who am I

[source,groovy]
----
speaker {
    name 'Cédric Champeau'
    company 'Gradle Inc'
    oss 'Apache Groovy committer',
    successes 'Static type checker',
              'Static compilation',
              'Traits',
              'Markup template engine',
              'DSLs'
        failures Stream.of(bugs),
        twitter '@CedricChampeau',
        github 'melix',
        extraDescription '''Groovy in Action 2 co-author
Misc OSS contribs (Gradle plugins, deck2pdf, jlangdetect, ...)'''
}
----

== Agenda

* What are Java 9 modules?
* Migrating an existing app to modules
* Running tests
* (bonus!) multi-release jars
* (extra time!) minimal runtime images


== JPMS aka Modules for Java

* Modularity for the Java platform
** *Reliable configuration* (goodbye _classpath_)
** *Strong encapsulation* (goodbye _com.sun_)
* Enforce strict boundaries between modules
** compile-time
** run-time

[background-color="#01303a"]
== Java 9 modules

=== Declaring a module

.module-info.java
[source,java]
----
module com.foo.bar {
    requires org.baz.qux;
    exports com.foo.bar.alpha;
    exports com.foo.bar.beta;
}
----

=== A module

* Declares dependencies onto other modules
** optionally transitive
* Declares a list of packages it exports
* will be found on _modulepath_
* optionally declares services

== Why it's going to break your apps

* Exports are package based
* A non-exported package is not visible to consumers
* 2 modules cannot export the same packages
* 2 modules cannot have the same internal packages

Death to *split packages*.

== Gradle support for Java 9

* Good news: it works!
* Sad news: limited (but in progress)

=== What Gradle supports

* Running on Java 9
* Cross-compiling
** Gradle runs on JDK 8
** Gradle builds using JDK 9
* No built-in support for modulepath
* But we can help!

[background-color="#01303a"]
== The Java Library plugin

=== The Java Library plugin

* Introduced in Gradle 3.4
* Aimed at Java libraries
* Separates API and implementation dependencies

=== API dependencies

* Form part of the API of the library
* Typically: method parameters, interfaces, superclasses, ...

=== Implementation dependencies

* Used "internally"
* Shouldn't leak to compile classpath of consumers
* Implementation detail

== Usage

[source,groovy]
----
// This component has an API and an implementation
apply plugin: 'java-library' 

dependencies {
   api project(':model')
   implementation 'com.google.guava:guava:18.0'
}
----

== The StoryTeller application

* Built with Java 8 (hence no modules)
* 6 "modules"
** `fairy` - Entry point to the storyteller java application
** `tale` - public `Tale` interface.
** `formula` - makes it easy to weave a `Tale`
** `actors` - represents the characters in a fairy tale.
** `pigs` - produces an instance of `Tale` which represents the story of the three little pigs.
** `bears` - produces an instance of `Tale` which represents the story of Goldilocks and the three bears.

=== Dependency graph

image::project-graph.png[height=500px]

=== Fairy: StoryTeller

[source, java]
----
package org.gradle.fairy.app;

public class StoryTeller {
    public static void main(String[] args) {
        ServiceLoader<Tale> loader = ServiceLoader.load(Tale.class);
        if (!loader.iterator().hasNext()) {
            System.out.println("Alas, I have no tales to tell!");
        }
        for (Tale tale : loader) {
            tale.tell();
        }
    }
}
----

=== Fairy: build.gradle

[source,groovy]
----
dependencies {
    implementation project(':tale')

    runtimeOnly project(':pigs')
    runtimeOnly project(':bears')
}
----

=== Formula: build.gradle


[source,groovy]
----
dependencies {
    api project(':tale')
    api project(':actors')

    testImplementation 'junit:junit:4.12'
}
----

=== Strong encapsulation breakage

* `ModularityTest` lives in `Formula`
* Let's see how encapsulation is broken

=== Test 1: should always pass

[source,java]
----
    @Test
    public void canReachActor() {
        Actor actor = Imagination.createActor("Sean Connery");
        assertEquals("Sean Connery", actor.toString());
    }
----

=== Test 2 : should fail

[source,java]
----
    @Test
    public void canDynamicallyReachDefaultActor() throws Exception {
        Class clazz = ModularityTest
            .class.getClassLoader()
            .loadClass("org.gradle.actors.impl.DefaultActor");
        Actor actor = (Actor) clazz.getConstructor(String.class)
            .newInstance("Kevin Costner");
        assertEquals("Kevin Costner", actor.toString());
    }
----

=== Test 3 : should fail

[source,java]
----
    @Test
    public void canReachDefaultActor() {
        Actor actor = new org.gradle.actors.impl.DefaultActor("Kevin Costner");
        assertEquals("Kevin Costner", actor.toString());
    }
----

=== Test 4 : fails already!

[source,java]
----
    @Test
    public void canReachGuavaClasses() {
        Set<String> strings = com.google.common.collect.ImmutableSet.of("Hello", "Goodbye");
        assertTrue(strings.contains("Hello"));
        assertTrue(strings.contains("Goodbye"));
    }
----

=== How does it map to modular Java concepts?

(warning: this is not one to one mapping)

* `implementation` -> requires
* `api` -> requires _transitive_
* `runtimeOnly` -> requires _static_

=== Source layout

* src/main/java -> your application sources
*src/test/java -> your test sources

* We want to compile main and tests separately
** It's good for performance
** It's better for incrementality
** Problem: one or two modules?

[background-color="#01303a"]
== Let's migrate!

=== Let's migrate

* Bottom-up approach
* Fully compatible
* Modules are consumable as regular jars

Let's take advantage of that!

== Migrate the `actors` module

=== Add the module-info descriptor

[source,java]
----
module org.gradle.actors {
    exports org.gradle.actors;
    requires guava;
}
----

=== Compiling the module

[source,groovy]
----
ext.moduleName = 'org.gradle.actors'

sourceCompatibility = 9
targetCompatibility = 9

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
----

=== Testing (1/2)

* 2 possible approaches
** a test module which reads the main module
** patch module: easier, more compatible, faster

=== Testing (2/3)

[source,groovy]
----
compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'junit',
            '--add-reads', "$moduleName=junit",
            '--patch-module', "$moduleName=" + 
               files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}
----

=== Testing (3/3)

[source,groovy]
----
test {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--add-modules', 'ALL-MODULE-PATH',
            '--add-reads', "$moduleName=junit",
            '--patch-module', "$moduleName=" + 
               files(sourceSets.test.java.outputDir).asPath,
        ]
        classpath = files()
    }
}
----

== What about the other projects?

* They are still regular jars
* But we _know_ we're going to migrate them at some point

=== Automatic modules

* When a "legacy" jar is added to _module path_
* Java infers a module name from the _file name_ (uh!)
* Unless you _reserve_ a module name

=== Add `Automatic-Module-Name`

=== Module Name

* Add `ext.moduleName = '...'` on each module

=== Configure the jar task

[source,groovy]
----
jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
}
----

== Everything as a module

=== Cross-configure all projects


[source, groovy]
----
subprojects {
    afterEvaluate {
         ...
        compileJava {
            inputs.property("moduleName", moduleName)
            doFirst {
                options.compilerArgs = [
                    '--module-path', classpath.asPath,
                ]
                classpath = files()
            }
        }

        ...
    }
}

----

=== Remove `Automatic-Module-Name`

* No longer required

=== Move to the new service infrastructure

* Replace `META-INF/services` with `module-info`

[source,groovy]
----
module org.gradle.fairy.tale.bears {
    requires org.gradle.actors;
    requires transitive org.gradle.fairy.tale;
    requires org.gradle.fairy.tale.formula;

    provides org.gradle.fairy.tale.Tale
        with org.gradle.fairy.tale.bears.GoldilocksAndTheThreeBears;
}
----

== Running the modular application

* Apply the `application` plugin
* But requires some tweaking...

=== The `run` task

[source,groovy]
----
mainClassName = "$moduleName/org.gradle.fairy.app.StoryTeller"

run {
    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
            '--module-path', classpath.asPath,
            '--module', mainClassName
        ]
        classpath = files()
    }
}
----

[background-color="#01303a"]
== We have good news!

=== Experimental Jigsaw plugin

[source,groovy]
----
plugins {
    id 'org.gradle.java.experimental-jigsaw' version '0.1.1'
}
----

[background-color="#01303a"]
== Multi-release jars

=== Goal

* Provide several versions of the same class for runtime

=== Disclaimer

Don't do this at home

=== Cross-compilation

* Running Gradle on Java 9 doesn't mean you need to use it
* You can target different compilers

=== Sources setup

* `src/main/java` : shared sources
* `src/main/java9` : Java 9 specific sources

=== Add a source set

[source,groovy]
----
sourceSets {
   java9 {
      java {
       srcDirs = ['src/main/java9']
      }
   }
}
----

=== Configure language level

[source,groovy]
----
compileJava {
   sourceCompatibility = 8
   targetCompatibility = 8
}

compileJava9Java {
   sourceCompatibility = 9
   targetCompatibility = 9
}
----

=== Add dependency on shared sources

[source,groovy]
----
dependencies {
    java9Implementation files(sourceSets.main.output.classesDirs) { 
       builtBy compileJava 
    }
}
----

=== Configuring the MRjar

[source,groovy]
----
jar {
   into('META-INF/versions/9') {
      from sourceSets.java9.output
   }
   manifest.attributes(
      'Multi-Release': 'true', 
      'Main-Class': 'com.acme.JdkSpecific'
   )
}
----

=== Setting up a run task

[source,groovy]
----
task run(type: JavaExec) {
   dependsOn jar
   classpath files(jar.archivePath)
   main = 'com.acme.JdkSpecific'
}
----

=== The `--release` flag

* Fixes `bootclasspath` that no-one uses
* Available since JDK 9
* Compiles against the *right* API
* Gradle will **not** add `-source`/`-target`
** Only if `--release` is present

=== Configuring compile tasks

[source,groovy]
----
project.afterEvaluate {
   tasks.withType(JavaCompile) {
      def version = compat(sourceCompatibility)
      options.compilerArgs.addAll(['--release', version])
   }
}
----

[background-color="#01303a"]
== Minimal runtime image

=== jlink

* Allows building minimal runtime images
* requires **full modularization**
** including transitive dependencies
** hence not relevant in this example (Guava)

=== No built-in task (yet)

[source,groovy]
----
task jlink(type:Exec) {
   ext.outputDir = file("$buildDir/jlink")
   inputs.files(configurations.runtimeClasspath)
   inputs.files(jar.archivePath)
   outputs.dir(outputDir)
   dependsOn jar
   doFirst {
      outputDir.deleteDir()
      commandLine '$javaHome/bin/jlink',
           '--module-path', 
           "$javaHome/jmods/:${configurations.runtimeClasspath.asPath}:${jar.archivePath}",
           '--add-modules', moduleName,
           '--output', outputDir
    
    }
}
----

[background-color="#01303a"]
== Conclusion

=== Conclusion

* Slides: https://melix.github.io/javaone-2017-jigsaw
* Discuss: @CedricChampeau

[background-color="#01303a"]
== Thanks!

